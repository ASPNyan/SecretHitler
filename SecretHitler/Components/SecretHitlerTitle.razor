@inject IJSRuntime Js

<DynamicHeadContent>
    <link rel="stylesheet" href="css/Components/Title.css">
</DynamicHeadContent>

<h1 id="Title" class="title-large eskapade-fraktur primary-text" @attributes="@UnmatchedParameters">
    @SecretHitler[_currentTitleRange]
</h1>

@code { 
    private const string SecretHitler = "Secret Hitler";
    private Range _currentTitleRange = 6..7; // the middle space character, the end value is 1 based unlike the start.

    [Parameter(CaptureUnmatchedValues = true)]
    public IDictionary<string, object> UnmatchedParameters { get; set; } = new Dictionary<string, object>();
    
    private bool AutoplayBlocked { get; set; }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;

        for (int i = 0; i++ < 6;)
        {
            await Task.Delay(210);
            _currentTitleRange = (_currentTitleRange.Start.Value - 1)..(_currentTitleRange.End.Value + 1);
            StateHasChanged();
            if (!AutoplayBlocked) try 
            {
                await Js.InvokeVoidAsync("audioFunctions.playTypewriter");
            }
            catch (JSException) // Autoplay blocked
            {
                AutoplayBlocked = true;
            }
        }
        
        if (!AutoplayBlocked) await Js.InvokeVoidAsync("audioFunctions.playTypewriterEnd");
    }
}